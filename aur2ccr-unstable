# #!/bin/bash
# aur2ccr - version 0.5.7
# Pull information from AUR or Arch repos, and make source packages that are ready for uploading to CCR.
# Usage: aur2ccr [OPTIONS] [PACKAGES]
# Todo: see README (https://github.com/redhat69/aur2ccr/README)
# -- CREDITS --
# This script uses the information on converting Arch/AUR files to CCR from http://chakra-linux.org/wiki/index.php/How_to_upload_a_package_to_CCR_when_it_exists_on_Arch_or_Aur
# Portions of this script may have been taken from "CCR - A Chakra Community Repository helper", which was in turn forked from "Packer by Matthew Bruenig <matthewbruenig@gmail.com>", a GPL3 bash script.
# Thanks to: 
#  CaptainKnots for the github repo and the original idea behind aur2ccr;
#  Inkane for submitting bug reports, feature requests, and code;
#  abveritas for adding to the arch/chakra package name translations list;
#  tetris4 and [jmc] for their support and help developing the script;
#  the developers of ccr, packer, abs, and the other tools this script uses;
#  all the Chakra devs, for making such an awesome distro;
#  ...and all others who have used aur2ccr or helped in some other way.

# internal settings - not all of these are used yet, but they will be someday
pname="aur2ccr"
pver="0.5.7"
confdir="/etc/aur2ccr"
lconfdir="~/.aur2ccr"
tmpdir="/tmp"
namesconf="names.conf"
apconf="archrepos.pacman.conf"
acconf="aur2ccr.conf"

# initialize variables
startdir="$(pwd)"
findir="$(pwd)"
badpkgs=0
consolidate=0
edit=0
addad=0
archrinit=0
newline='
'
RED='\e[1;31m'
#GREEN='\e[1;32m'
YELLOW='\e[1;33m'
BLUE='\e[1;34m'
PINK='\e[1;35m'
#CYAN='\e[1;36m'
WHITE='\e[1;37m'
#BLACK='\e[1;39m'
ENDCOLOR='\e[0m' 
programs=( abs autoconf automake bison ccr ed flex gawk gcc libtool m4 make makepkg patch packer pacman )


# output formatting functions
debug() { # echo things when called like 'debug doing stuff...' only when debug=1
  if [ "$debug" == 1 ]; then
    if [ "$1" == "-n" ]; then
      local eopts="$1"
      shift
    fi
    echo -e $eopts "${PINK}++>${ENDCOLOR}" "$@"
  else
    return 0
  fi
}

msg() { # make aur2ccr's normal output prettier and more unified.
  debug "msg('$@')"
  if [ "$1" == "-n" ]; then
    local eopts="$1"
    shift
  fi
  echo -e $eopts "${BLUE}==>${ENDCOLOR}" "$@"
}

warn() { # make aur2ccr's warning messages prettier and more unified.
  debug "warn('$@')"
  if [ "$1" == "-n" ]; then
    local eopts="$1"
    shift
  fi
  echo -e $eopts "${YELLOW}==>${ENDCOLOR}" "$@"
}

err() { # make aur2ccr's error messages prettier and more unified.
  debug "err('$@')"
  if [ "$1" == "-n" ]; then
    local eopts="$1"
    shift
  fi
  echo -e $eopts "${RED}==> ERROR:${ENDCOLOR}" "$@" >&2
}

clean() {  # clean up temp files
  debug "clean('$@')"
  if [ -z "$1" ]; then
    debug "cleaning..."
    warn "Keyboard interrupt caught, cleaning up..."
    debug "rm'ing pacman conf"
    rm -f pacman.conf.tmp
    debug "exiting..."
    exit 1
  else
    echo -n # this may be used later to clean up something else
    debug "not currently used"
  fi
}

initarchr() {	# set up the arch repo vars, so we only need to sudo once
  debug "initarchr('$@')"
  printf '[community]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[core]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[extra]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[multilib]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/x86_64\n' > pacman.conf.tmp
  if (sudo pacman -Sy --config pacman.conf.tmp); then
    areplist=$(pacman --config pacman.conf.tmp -Ssq)
    afullist=$(pacman --config pacman.conf.tmp -Ss)
    archrinit=1
    debug "sudo pacman -Sy ..."
    sudo pacman -Sy >&2> /dev/null
    debug "rm pacman conf"
    rm pacman.conf.tmp
  else
    err "An error occurred while checking Arch repos."
    debug "rm pacman conf"
    rm pacman.conf.tmp
    debug "exiting..."
    exit 1 # you can't call this in an if, (like if initarchr) because the vars will be unset
  fi
}

grepacfull() {  # grep the output of pacman -Ss in a useful manner
  debug "grepacfull('$@')"
  if [ "$archrinit" == 0 ]; then 
    initarchr
  fi
  local num=0
  local ret=0
  IFS="$newline"
  debug "entering 'for' loop..."
  for line in $afullist; do
    debug -n ". "
    if [ "$num" == 0 ]; then
      entry="${line}${newline}"
      num=1
    elif [ "$num" == 1 ]; then
      entry="${entry}${line}"
      num=0
      if (echo "$entry" | grep -iq "$1"); then # this is slow [avg 45-50s total], we need a better way. would perl be faster?
        echo "$entry"
        local ret=1
      fi
    fi
  done
  IFS=" "
  if [ "$ret" == 0 ]; then
    echo " (nothing found)"
  fi
}

isinccr() {  # check in CCR and main repos for package
  debug "isinccr('$@')"
  if (ccr -Ssq $1 | grep -q "^$1$"); then
    return 0
  else
    return 1
  fi
}

isinrepos() {  # check in main Chakra repos for package
  debug "isinrepos('$@')"
  if (pacman -Ssq $1 | grep -q "^$1$"); then 
    return 0
  else
    return 1
  fi
}

isinaur() {
  debug "isinaur('$@')"
  if !(echo "$1" | grep -q '^..'); then  # if the package name is not at least 2 chars, checking aur will fail.
    err "Package names must be at least two characters in length"
    exit 1
  fi
  if (wget -q --spider https://aur.archlinux.org/packages/$(echo "$1" | sed 's/\(..\).*/\1/')/$1/PKGBUILD); then
    return 0
  else 
    return 1
  fi
}

isinarchr() {
  debug "isinarchr('$@')"
  msg "Checking Arch repos..."
  if [ "$archrinit" == 0 ]; then
    initarchr  
  fi # we don't need an else, the rest is below and the vars are already set

  if (echo "$areplist" | grep -q "^$1$" ); then
    return 0
  else
    return 1
  fi # much nicer than the old function
}

getarchname() {
  debug "getarchname('$@')"
  if isinarchr $1; then
    archname=$(echo "$afullist" | grep -o "^[^ ]*/$1\s" | sed 's/\s//g')
  else
    err "'$1' not found in Arch repos"
    return 1
  fi
}

depends() {  # get the dependencies from the PKGBUILD - may not work with multi-line depends
  debug "depends('$@')"
  depends=$(grep '^depends=' PKGBUILD | sed "s/depends=(['\"]\(.*\)['\"])/\1/; s/['\"]//g")
  depends="$depends $(grep '^makedepends=' PKGBUILD | sed "s/makedepends=(['\"]\(.*\)['\"])/\1/; s/['\"]//g")"
  depends="$(echo "$depends" | sed "s/makedepends=(['\"]*)//")"
  depends="$(echo "$depends" | sed "s/makedepends=(\([^'\"]*\))/\1/")"
  depends="$(echo "$depends" | sed "s/depends=(['\"]*)//")"
  depends="$(echo "$depends" | sed "s/depends=(\([^'\"]*\))/\1/")"
  depends="$(echo "$depends" | sed "s/.*(\(.*\)/\1/")" # PLEASE, just quote your depends! It's not that hard! 
  depends="$(echo "$depends" | sed "s/\(.*\))/\1/")"   # depends=('every' 'single' 'dependency')
  odepends=$depends; depends=
  for depend in $odepends; do # get rid of packagename>=V.E.R stuff
    depends="$depends $(echo $depend | sed 's/\(.*\)>.*/\1/')"
  done
}

addmaintainer() {  # change maintainer info in the PKGBUILD
  debug "addmaintainer('$@')"
  sed -i.oldmaint 's/^# Maintainer: /# Contributer: /' PKGBUILD
  sed -i 's/^# $Id:.*$//' PKGBUILD
  if !(printf "# Maintainer: ${maintainer}\n$(cat PKGBUILD)" > PKGBUILD.1 && mv PKGBUILD.1 PKGBUILD); then
    return 1
  fi
}

addad() {
  debug "addad('$@')"
  ed -s PKGBUILD << EOF && msg "Ad added. Thanks for supporing aur2ccr! :)"
2i
# Contributer: aur2ccr (http://chakra.sourceforge.net/ccr/packages.php?K=aur2ccr)
.
wq
EOF
}

uchksums() {  # update checksums with 'makepkg -gf'
  debug "uchksums($@)"
  sums="$(makepkg -gf)"
  stype="$(echo $sums | grep -o "^..*sums=")"
  if (echo "$sums" | grep -q "^$stype"); then
    if (grep -Pq "(^$stype.*\)|^${stype}[^\(])" PKGBUILD); then # if all on one line
      if (sed -i "s/^$stype.*/$sums/" PKGBUILD); then
        return 0
      else
        err "sed failed while updating checksums"
        return 1
      fi
    elif (grep -q "^$stype" PKGBUILD); then
      stype="$(echo "$stype" | sed 's/=//; s/\s//g')"
      debug "awking..."
      local new="$(awk -v "newsums=$sums" -v "stype=$stype" '$1 ~ stype { t = 1; } t == 1 { if ($0 ~ "\)") { t = 0; print(newsums); next; } next; } { print; }' PKGBUILD 2>/dev/null)" # sheesh. awk courtesy of pr3d4t0r, I haven't a clue how it works.
      debug "sending awk output to PKGBUILD..."
      echo "$new" > PKGBUILD
      return 0
    elif [ -z "$sums" ]; then
      return 0
    else
      return 1
    fi
  else
    err "something went wrong while updating checksums"
    return 1
  fi
}

dotherest() {
  debug "dotherest('$@')"
  local pkgname=$1
  depsnotinrep=0
  if [ -n "$maintainer" ]; then
    msg "Changing maintainer information..."
    debug "if addmaintainer \$maintainer, then msg(done), else err(failed)..."
    if (addmaintainer "$maintainer"); then
      msg "Done"
    else
      err "Failed"
    fi
  fi
  debug "if \$addad then addad..."
  if [ "$addad" == 1 ]; then
    addad
  fi
  debug "if uchksums..."
  if uchksums; then
    msg "checksums for $pkgname updated"
  else
    warn "checksums for $pkgname could not be updated!"
  fi
  debug "if \$edit, then edit..."
  if [ "$edit" -eq 1 ]; then
    msg "Opening '$pkgname' PKGBUILD with $EDITOR"
    warn "Note: dependencies have not yet been checked, so the PKGBUILD"
    warn " may be changed after you modify it."
    debug "\$EDITOR PKGBUILD"
    $EDITOR PKGBUILD
  fi
  depends
  debug "for pkg in \$depends..."
  for pkg in $depends; do 
    if isinccr $pkg; then 
      msg "$pkgname dependency '$pkg' already in CCR or repos, continuing"
      if !(isinrepos $pkg); then
        let depsnotinrep=$depsnotinrep+1
      fi
    elif namelookup $pkg; then
      namelookup $pkg
      if !(namechange $pkg); then
        err "Something went wrong while attempting to edit the $pkg PKGBUILD"
        return 1
      fi
      if isinccr $cpkgname; then
        msg "$pkgname dependency '$apkgname' already in CCR or repos as '$cpkgname', continuing"
        if !(isinrepos $cpkgname); then
          let depsnotinrep=$depsnotinrep+1
        fi
      else 
        err "There seems to be a bad definition in $confdir/$namesconf. Please fix this."
        err "The offending line is: '$apkgname=$cpkgname'"
        let badpkgs=$badpkgs+1
        return 1
      fi
    else
      debug "depsnotinrep++"
      let depsnotinrep=$depsnotinrep+1
      msg "$pkgname dependency '$pkg' not in CCR or repos, looking at Arch packages"
      if isinaur $pkg; then
        debug "pushd `pwd`"
        pushd "$(pwd)" >/dev/null
        if !(makeccrpkg $pkg); then
          err "Some error occurred while building '$pkg'"
          err "Without this dependency, $pkgname cannot be built"
          debug "popd"
          popd >/dev/null
          return 1
        else
          debug "popd"
          popd >/dev/null
        fi
      elif isinarchr $pkg; then
        msg "'$pkg' found in the Arch repos..."
        debug "pushd `pwd`"
        pushd "$(pwd)" >/dev/null
        if !(makeccrpkg_r $pkg); then 
          err "Some error occurred while building '$pkg'"
          err "Without this dependency, $pkgname cannot be built"
          debug "popd"
          popd >/dev/null
          return 1
        else
          debug "popd"
          popd >/dev/null
        fi
      else
        err "Sorry, dependency '$pkg' cannot be found."
        err "Without this dependency, $pkgname cannot be built"
        let badpkgs=$badpkgs+1
        return 1
      fi
    fi
  done
  if [ "$depsnotinrep" -eq 0 ]; then
    msg "Testing package '$pkgname'..."
    if !(makepkg -sfr); then
      err "Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
      let badpkgs=$badpkgs+1
      failedpkgs="$failedpkgs $pkgname"
      return 1
    fi
  else
    warn "Package '$pkgname' has dependencies outside of the Chakra repos."
    warn "Running 'makepkg -s' on this package will fail, so we cannot test it now."
    warn "Please test the final .src.tar.gz package manually with ccr."
  fi
  if (makepkg --source -f); then
    msg "Package '$pkgname' built successfully."
    if [ "$consolidate" -eq 1 ]; then
      pkgpkg="$(ls $pkgname*.src.tar.gz)"
      mv $pkgpkg "$findir"
      msg "$pkgpkg moved to $findir"
    fi
  else
    err "Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  return 0
}

makeccrpkg() {    # grab a package from AUR, and make it into a CCR-ready src package
  debug "makeccrpkg('$@')"
  cd "$startdir"
  local pkgname=$1
  mkdir -p "$pkgname"
  cd "$pkgname"
  if test -r "$pkgname.tar.gz"; then 
    rm "$pkgname.tar.gz"
  fi
  if !(wget "https://aur.archlinux.org/packages/$(echo "$pkgname" | sed 's/\(..\).*/\1/')/$pkgname/$pkgname.tar.gz"); then
    err "There was an error while trying to download the package."
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  if !(tar -xzf "$pkgname.tar.gz" && rm "$pkgname.tar.gz"); then
    err "tar could not extract the archive"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  cd "$pkgname"

  if dotherest "$pkgname"; then
    return 0
  else
    return 1
  fi
}


makeccrpkg_r() {    # grab a package from Arch repos, and make it into a CCR-ready src package
  debug "makeccrpkg_r('$@')"
  cd "$startdir"
  local pkgname=$1
  mkdir -p "$pkgname"
  cd "$pkgname"
  if test -r "$pkgname.tar.gz"; then 
    rm "$pkgname.tar.gz"
  fi
  #
  #	get Arch package with PKGBUILD, .install, etc, using git or perl script or whatever 
  #
  # extract the package if needed
  #
  getarchname $pkgname
  if [ "$archname" == 0 ]; then
    err "'$pkgname' cannot be found"
    return 1
  fi # else...
  msg "found '$pkgname' as '$archname'"
  if (sudo abs "$archname"); then
    rm -rf "./$pkgname"
    if (sudo mv "/var/abs/$archname" "./$pkgname"); then
      if (sudo chown -hR $USER:$GROUPS "./$pkgname"); then
        msg "$pkgname info retrieved from Arch repos successfully"
      else
        err "chown failed"
	return 1
      fi
    else
      err "could not move /var/abs/$archname to working dir"
      let badpkgs=$badpkgs+1
      return 1
    fi
  else
    err "abs failed"
    let badpkgs=$badpkgs+1
    return 1
  fi
  #
  #  ^ this is a quick fix ^
  #
  cd "$pkgname" #this should cd to wherever the stuff above put the PKGBUILD
  if dotherest "$pkgname"; then
    return 0
  else
    return 1
  fi
}
  
makeccrpkg_u() {
  debug "makeccrpkg_u('$@')"
  cd "$startdir"
  local pkgname="$(basename "$url" | sed 's/\([^\.]\)\..*/\1/')"  # if $url is http://example.com/path/package.tar.gz, $pkgname is set to "package".
  mkdir -p "$pkgname"
  cd "$pkgname"
  myfile="$BASHPID-$(basename "$url")"
  if !(wget -O "$myfile" "$url"); then 
    err "There was an error while trying to download the package"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  dir="$(tar -taf "$myfile" | head -1)"
  if !(tar -xaf "$myfile"); then
    err "tar could not extract the archive"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  cd "$dir"
  if ! test -r PKGBUILD; then
    err "The package you specified does not seem to be a valid source archive."
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi

  if dotherest "$pkgname"; then
    return 0
  else
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
}


makeccrpkg_f() {
  debug "makeccrpkg_f('$@')"
  cd "$startdir"
  if ! test -r "$file"; then
    err "'$file' cannot be opened or does not exist"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  local pkgname="$(basename "$file" | sed 's/\([^\.]\)\..*/\1/')"
  mkdir -p "$pkgname"
  dir="$(tar -taf "$file" | head -1)"
  if !(tar -xaf "$file" -C "$pkgname"); then
    err "tar could not extract the archive"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  cd "$pkgname"
  cd "$dir"
  if ! test -r PKGBUILD; then
    err "The package you specified does not seem to be a valid source archive."
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi

  if dotherest "$pkgname"; then
    return 0
  else
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
}

makeccrpkg_d() {  # uses $pkgdir as directory containting PKGBUILD. (argument to -d)
  debug "makeccrpkg_d('$@')"
  cd "$startdir"
  local pkgname="$(basename "$pkgdir")"
  if test -d "$pkgdir"; then
    cd "$pkgdir"
  else
    err "$pkgdir is not a directory or does not exist"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi; if ! test -r "PKGBUILD"; then
    err "'$pkgdir/PKGBUILD' cannot be opened or does not exist"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  cd "$startdir"
  if !(mkdir -p "$pkgname"); then
    err "cannot create directory '$startdir/$pkgname'"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi; if !(cp -r "$pkgdir" "$pkgname/"); then
    err "cannot copy files from '$pkgdir'"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  cd "$pkgname/$pkgname"

  if dotherest "$pkgname"; then
    return 0
  else
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
}

namelookup() {  # see https://github.com/redhat69/aur2ccr/issues/1
  debug "namelookup('$@')"
  if test -r "$confdir/$namesconf"; then
    if (grep -q "$1=..*" "$confdir/$namesconf"); then
      apkgname="$1"
      cpkgname="$(grep "^$1=..*" "$confdir/$namesconf" | sed "s/$1=//")"
    else
      return 1
    fi
  else 
    return 1
  fi
  return 0
}

namechange() {
  debug "namechange('$@')"
  depends
  for pkg in $depends; do 
    if namelookup $pkg; then
      namelookup $pkg
      if (sed -i "s/\(^[^ ]*depends=.*[(\s'\"]*\)${apkgname}\([\s'\")]*\)/\1${cpkgname}\2/g" PKGBUILD); then
        return 0
      else
        return 1
      fi
    fi
  done
}

aursearch() {  # uses 'packer'
  debug "aursearch('$@')" >&2
  packer --auronly -Ss $1
}

pkgsearch() { # there is no reason for this function to ever be called except right after isinarchr returns 1
  debug "pkgsearch('$@')"
  warn "Package '$1' not found in AUR or Arch repos."
  warn "Did you mean: "
  debug "checking aursearch..."
  local aurpkgs="$(aursearch $1)"
  if [ -n "$aurpkgs" ]; then
    debug "found aurpkgs, echoing:"
    echo "$aurpkgs"
    debug "exiting..."
    exit 1
  else
    debug "grepping pacman..."
    grepacfull $1
    debug "exiting..."
    exit 1
  fi
}

checkaur() {
  debug "checkaur('$@')"
  if isinaur $1; then 
    msg "'$1' found in AUR..."
    if !(makeccrpkg $1); then
      let badpkgs=$badpkgs+1
      failedpkgs="$failedpkgs $1"
    fi
  elif isinarchr $1; then
    msg "'$1' found in the Arch repos..."
    if !(makeccrpkg_r $1); then
      let badpkgs=$badpkgs+1
      failedpkgs="$failedpkgs $1"
    fi
  else
    pkgsearch $1
  fi
}

usage() {
  debug "usage('$@')"
  echo "Usage: $(basename $0) [OPTIONS] [PACKAGES]" # is this better than $0?
  echo "Create CCR-ready source packages from packages in AUR or Arch repos"
  echo "Example: $(basename $0) twisted"
  echo 
  echo "Options: "
  echo "  -m <maintainer>	add maintainer information to each PKGBUILD before building"
  echo "                	<maintainer> should be in the form 'My Name (nick) <me@example.com>'"
  echo "  -e			edit the PKGBUILD for each package with \$EDITOR before building"
  echo "  -a			add an aur2ccr advertisement - add as Contributer: "
  echo "        		'aur2ccr (http://chakra.sourceforge.net/ccr/packages.php?K=aur2ccr)'"
  echo "  -c			move all CCR source packages into the working directory"
  echo "  -f <file>		create a CCR source package from source package <file>"
  echo "  -u <URL>		... or from an AUR/CCR-compatible source package at <URL>"
  echo "  -d <dir>		... or from a PKGBUILD and (optional) other files in <dir>"
  echo "  -C <newdir>		use <newdir> as the working directory instead of the current dir"
  echo "  -t			use '$tmpdir' as the build directory instead of the current dir"
  echo "   			(all finished src packages will be moved into the working dir, like -c)"
  echo "  -h			display this help and exit"
  echo "  -v			print version information and exit"
  echo 
  echo "Note: Options must be specified separately, like '-c -e', not '-ce'."
  echo "This will (hopefully) be fixed in a future version."
  echo 
  echo "Report bugs at: <https://github.com/redhat69/aur2ccr/issues/>"
  echo "aur2ccr home: <https://github.com/redhat69/aur2ccr/>"
  debug "exiting..."
  exit 0
}

popopts() {  # populate variables, enumerate options and arguments -- crappy - if you have a better way, *please* tell me
  debug "popopts('$@')"
  for arg in "$@"; do 
    if [ -n "$isfile" -a "$isfile" == 1 ]; then
      file="$arg"
      isfile=0
      continue
    elif [ -n "$isurl" -a "$isurl" == 1 ]; then 
      url="$arg"
      isurl=0
      continue
    elif [ -n "$isdir" -a "$isdir" == 1 ]; then 
      pkgdir="$arg"
      isdir=0
      continue
    elif [ -n "$iscdir" -a "$iscdir" == 1 ]; then 
      startdir="$arg"
      findir="$arg"
      iscdir=0
      continue
    elif [ -n "$ismaint" -a "$ismaint" == 1 ]; then
      maintainer="$arg"
      ismaint=0
      continue
    fi
    if [ -n "$arg" -a "$arg" == "-m" ]; then
      ismaint=1
    elif [ -n "$arg" -a "$arg" == "-e" ]; then
      edit=1
    elif [ -n "$arg" -a "$arg" == "-c" ]; then
      consolidate=1
    elif [ -n "$arg" -a "$arg" == "-f" ]; then
      isfile=1
    elif [ -n "$arg" -a "$arg" == "-u" ]; then
      isurl=1
    elif [ -n "$arg" -a "$arg" == "-d" ]; then
      isdir=1
    elif [ -n "$arg" -a "$arg" == "-C" ]; then
      iscdir=1
    elif [ -n "$arg" -a "$arg" == "-t" ]; then
      usetdir=1
      consolidate=1
    elif [ -n "$arg" -a "$arg" == "-h" ]; then
      usage
    elif [ -n "$arg" -a "$arg" == "-v" ]; then
      echo "$pname $pver"
      exit 0
    elif [ -n "$arg" -a "$arg" == "-a" ]; then
      addad=1
    else
      args="$args $arg"
    fi
  done
  if [ -n "$usetdir" -a "$usetdir" == 1 ]; then
    startdir="$tmpdir"
  fi
  if [ -z "$args" -a -z "$url" -a -z "$file" -a -z "$pkgdir" ]; then 
    err "You did not specify any packages to build"
    err "There is nothing to do. Exiting..."
    exit 1
  fi
}

# main()
debug "main('$@')"
# test for important programs that may not be installed 
for bin in ${programs[@]}; do
  debug "checking for $bin..."
  if test -x "$(which $bin 2>/dev/null)"; then
    debug " found"
    continue
  else
    debug " not found"
    err "Sorry, you need '$bin' to use this script."
    err "Try running 'sudo pacman -Sy abs base-devel ccr gawk packer sed'"
    exit 1
  fi
done

if [ -z "$1" -o "$1" == "--help" ]; then  # if no arguments were supplied, print usage info
  usage
fi

popopts "$@"

debug "setting trap"
trap clean INT  # trap keyboard interrupts (^C), in order to clean up temp files

debug "entering 'for' loop"
for pkgname in $args; do
  debug "checking $pkgname"
  if isinccr $pkgname; then
    msg "$pkgname is already in CCR or main Chakra repos."
    msg -n "Continue anyway? [y/N] "
    read ans
    if [ -z "$ans" -o "$ans" == "n" -o "$ans" == "N" ]; then 
      warn "Skipping $pkgname"
      continue
    else 
      checkaur $pkgname
    fi
  elif namelookup $pkgname; then
    msg "$apkgname is already in CCR or main Chakra repos as $cpkgname."
    msg -n "Continue anyway? [y/N] "
    read ans
    if [ -z "$ans" -o "$ans" == "n" -o "$ans" == "N" ]; then 
      warn "Skipping $pkgname"
      continue
    else 
      checkaur $pkgname
    fi
  else
    checkaur $pkgname
  fi
done
if [ -n "$url" ]; then
  makeccrpkg_u
fi; if [ -n "$file" ]; then
  makeccrpkg_f
fi; if [ -n "$pkgdir" ]; then
  makeccrpkg_d
fi

if [ "$badpkgs" -gt 0 ]; then
  err "$badpkgs package(s) failed"
  debug "at least $badpkgs packages failed, exiting..."
  exit 1
else
  msg "$badpkgs package(s) failed"
  debug "0 pkgs failed, exiting..."
  warn "Remember, just because aur2ccr seems to have succeeded, does not mean the package(s)"
  warn "will work. Please thoroughly test all packages BEFORE uploading them to CCR."
  warn "Broken packages may be removed without warning."
  exit 0
fi; if [ -n "$failedpkgs" ]; then 
  err "The bad package(s) are:"
  err "$failedpkgs"
  debug "exiting..."
  exit 1
fi
