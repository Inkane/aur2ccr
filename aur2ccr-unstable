#!/bin/bash
# aur2ccr - version 0.7
# Pull information from AUR or Arch repos, and make source packages that are ready for uploading to CCR.
# Usage: aur2ccr [OPTIONS] [PACKAGES]
# -- CREDITS --
# This script uses the information on converting Arch/AUR files to CCR from http://chakra-linux.org/wiki/index.php/How_to_upload_a_package_to_CCR_when_it_exists_on_Arch_or_Aur
# Portions of this script have been taken from "CCR - A Chakra Community Repository helper", which was in turn forked from "Packer by Matthew Bruenig <matthewbruenig@gmail.com>", a GPL3 bash script.
# Thanks to: 
#  CaptainKnots for the github repo and the original idea behind aur2ccr;
#  Inkane for submitting bug reports, feature requests, and code;
#  abveritas for adding to the arch/chakra package name translations list;
#  tetris4 and [jmc] for their support and help developing the script;
#  the developers of ccr, packer, abs, and the other tools this script uses;
#  the Chakra devs, for making such an awesome distro;
#  ...and all others who have used aur2ccr or helped in some other way.

# internal settings - you can modify some of these in aur2ccr.conf
pname="aur2ccr"         pver="0.7"
confdir="/etc/aur2ccr"  lconfdir=~/.aur2ccr # must be unquoted to use ~ substitution
tmpdir="/tmp/aur2ccr"   ltmpdir=~/tmp/aur2ccr
namesconf="names.conf"  apconf="archrepos.pacman.conf"  
acconf="aur2ccr.conf"   # initialize variables
startdir="$(pwd)"       findir="$(pwd)"
badpkgs=0               consolidate=0
edit=0                  addad=0
install=0               archrinit=0
newline=$'\n'           
RED='\e[1;31m'          YELLOW='\e[1;33m'
BLUE='\e[1;34m'         PINK='\e[1;35m'
WHITE='\e[1;37m'        ENDCOLOR='\e[0m'        
programs=( abs autoconf automake bison ccr cmake curl ed flex gawk gcc jshon libtool m4 make makepkg patch pacman getmirrors.sh )

# remove ./ in final
source /home/fabian/pkgbuilds/aur2ccr/messages.sh

# other functions
clean() {  # clean up temp files
  debug "clean('$@')"
  warn "Keyboard interrupt caught, cleaning up..."; debug "exiting..."
  exit 1
}

initarchr() {	# set up the arch repo vars, so we only need to sudo once
  debug "initarchr('$@')"
  if sudo pacman -Sy --config "$paconf"; then
    areplist=$(pacman --config "$paconf" -Ssq)
    afullist=$(pacman --config "$paconf" -Ss)
    archrinit=1
    debug "sudo pacman -Sy ..."
    sudo pacman -Sy >&2> /dev/null
  else
    err "An error occurred while checking Arch repos."
    debug "exiting..."
    exit 1
  fi
}

grepacfull() {  # grep the output of pacman -Ss in a useful manner
  debug "grepacfull('$@')"
  debug $1
  [[ "$archrinit" == 0 ]] && initarchr
  local num=0; local ret=0; IFS=$'\n'; debug "entering 'for' loop..."
  for line in $afullist; do
    debug $line
    if [[ "$num" == 0 ]]; then
      entry="${line}${newline}" ; num=1
    elif [[ "$num" == 1 ]]; then
      entry="${entry}${line}" ; num=0
      fentry="$(echo "$entry" | grep -i "$1")" # this is slow [avg 45-50s total], we need a better way. would perl be faster?
      [[ -n "$fentry" ]] && echo "$entry"
      [[ -n "$fentry" ]] && ret=1
    fi
  done ; IFS=" "
  [[ "$ret" == 0 ]] && echo " (nothing found)"
}

# use non local path in final
source /home/fabian/pkgbuilds/aur2ccr/handle_packages.sh

source /home/fabian/pkgbuilds/aur2ccr/edit_package.sh

isinstalled() { # check if $1 is already installed
  debug "isinstalled('$@')"
  pacman -Qq -- "$1" &>/dev/null
}

getneedeps() { # get the deps we need from CCR, return in $needeps
  debug "getneedeps($@)"
  for dep in "${depends[@]}"; do
    if isinrepos $dep; then
      needeps="$needeps"
    elif isinstalled $dep; then
      needeps="$needeps"
    elif isinccr $dep; then
      needeps="$needeps $dep"
    else
      err "dependency $dep cannot be found!"
      exit 1
    fi
  done
  needeps="$(echo $needeps | sed 's/^\s*//')"; debug "neepeds='$needeps'"
}

logerr() {  # keep track of errors; $1 is the package name
  debug "logerr('$@')"
  [[ -n "$1" ]] && let badpkgs=$badpkgs+1
  [[ -n "$1" ]] && failedpkgs="$failedpkgs $1"
}


dotherest() {  # this used to be 150 lines, but I managed to get it down a little bit - it's still too large.
  debug "dotherest('$@')"
  local pkgname=$1; debug "pkgname=$pkgname"
  depsnotinrep=0
  msg "Checking if this is a split PKGBUILD..."
  isplitp PKGBUILD && (makeccrpkg_s $pkgname && exit 0) && return 0
  msg "This doesn't appear to be a split PKGBUILD, continuing..."; msg -n "Checking for and fixing common PKGBUILD problems... "
  optipkg; echo "done."
  [[ -n "$maintainer" ]] && (msg "Changing maintainer information..."; debug "if addmaintainer \$maintainer, then msg(done), else err(failed)..."; (addmaintainer "$maintainer" && msg "Done" || err "Failed"))
  debug "if \$addad then addad..."
  [[ "$addad" == 1 ]] && addad
  debug "if uchksums..."
  (uchksums && msg "checksums for $pkgname updated") || warn "checksums for $pkgname could not be updated!"
  debug "if \$edit, then edit..."
  [[ "$edit" -eq 1 ]] && (msg "Opening '$pkgname' PKGBUILD with $EDITOR"; warn "Note: dependencies have not yet been checked, so the PKGBUILD"; warn " may be changed after you modify it."; debug "\$EDITOR PKGBUILD"; ${EDITOR-vi} PKGBUILD)
  depends
  debug "for pkg in ${depends[@]}..."
  for pkg in ${depends[@]}; do 
    if [ "$pkg" == "java-environment" -o "$pkg" == "java-runtime" ]; then
      msg "$pkg is a special package in the Chakra repos, continuing"
    elif [[ "$pkg" == "$pkgname" ]]; then
      warn "dependency cycle detected!"; warn "skipping '$pkgname' dependency '$pkg'"
    elif isinccr $pkg; then 
      msg "$pkgname dependency '$pkg' already in CCR or repos, continuing"
      isinrepos $pkg || let depsnotinrep=$depsnotinrep+1
    elif namelookup $pkg; then
      debug "namelookup returned 0, namechanging..."
      namechange $pkg || (err "Something went wrong while attempting to edit the $pkgname PKGBUILD"; logerr $pkg; exit 1) || return 1
      if isinccr $cpkgname; then
        msg "$pkgname dependency '$apkgname' already in CCR or repos as '$cpkgname', continuing"
        isinrepos $cpkgname || let depsnotinrep=$depsnotinrep+1
      else 
        err "There seems to be a bad definition in '$namesconf'. Please fix this."; err "The offending line is: '$apkgname=$cpkgname'"; logerr $pkg
        return 1
      fi
    else
      let depsnotinrep=$depsnotinrep+1
      msg "$pkgname dependency '$pkg' not in CCR or repos, looking at Arch packages..."
      if isinaur $pkg; then
        debug "pushd `pwd`"
        pushd "$(pwd)" >/dev/null
        (makeccrpkg $pkg && (debug "popd"; popd >/dev/null)) || (err "Some error occurred while building '$pkg'"; err "Without this dependency, $pkgname cannot be built"; debug "popd"; popd >/dev/null; exit 1) || return 1
      elif isinarchr $pkg; then
        msg "'$pkg' found in the Arch repos..."; debug "pushd `pwd`"
        pushd "$(pwd)" >/dev/null
        (makeccrpkg_r $pkg && (debug "popd"; popd >/dev/null)) || (err "Some error occurred while building '$pkg'"; err "Without this dependency, $pkgname cannot be built"; debug "popd"; popd >/dev/null; exit 1) || return 1
      else
        err "Sorry, dependency '$pkg' cannot be found."; err "Without this dependency, $pkgname cannot be built"; logerr $pkg
        return 1
      fi
    fi
  done
  if [[ "$depsnotinrep" -eq 0 ]]; then
    msg "Testing package '$pkgname'..."
    makepkg -sfr || (err "Some error occurred, check the $pkgname PKGBUILD in $(pwd)"; logerr $pkgname; exit 1) || return 1
  else
    msg "Package '$pkgname' has dependencies outside of the Chakra repos."
    msg "Attempting to install dependencies with 'ccr'..."; msg "(This may take a while)"
    getneedeps
    if [[ -z "$needeps" ]]; then
      msg "Oops, looks like you already have all these dependencies installed."
      makepkg -sfr || (err "Some error occurred, check the $pkgname PKGBUILD in $(pwd)"; logerr $pkgname; exit 1) || return 1
    elif ccr -S $needeps; then
      msg "Succeeded, continuing"
      makepkg -sfr || (err "Some error occurred, check the $pkgname PKGBUILD in $(pwd)"; logerr $pkgname; exit 1) || return 1
      if [[ "$install" -eq 0 ]]; then
        msg "Removing packages..."
        (sudo pacman -Rn $needeps && msg "Packages removed") || err "could not remove packages!"
      else
        depsnotinrep=0
      fi
    else
      warn "Package '$pkgname' has dependencies outside of the Chakra repos and CCR."; warn "Running 'makepkg -s' on this package will fail, so we cannot test it now."; warn "Please test the final .src.tar.gz package manually with ccr."
    fi
  fi
  if makepkg --source -f; then
    msg "Package '$pkgname' built successfully."
    if [[ "$consolidate" -eq 1 ]]; then
      pkgpkg="$(ls $pkgname*.src.tar.gz)"
      (mv $pkgpkg "$findir" && msg "$pkgpkg moved to $findir") || (err "$pkgpkg could not be moved to $findir"; logerr $pkgname; exit 1) || return 1
    fi
    if [[ "$install" -eq 1 && "$depsnotinrep" == 0 ]]; then
      msg "Installing $pkgname..."
      if ! sudo pacman -U $(ls *.pkg.tar.xz); then
        warn "pacman failed, trying 'makepkg -i'..."
        makepkg -if || (err "Could not install $pkgname."; exit 1) || return 1
      fi
      (isinstalled $pkgname && msg "$pkgname installed") || (err "Could not install $pkgname."; exit 1) || return 1
    elif [[ "$install" -eq 1 ]]; then
        warn "$pkgname cannot be installed, because it is missing dependencies."
    fi
  else
    err "Some error occurred, check the $pkgname PKGBUILD in '$(pwd)'"
    logerr $pkgname
    return 1
  fi
}


# use non local file path in final version
source /home/fabian/pkgbuilds/aur2ccr/makeccrpkg.sh

source /home/fabian/pkgbuilds/aur2ccr/search_check.sh

setup() {  # perform some setup-related stuff interactively
  sudo paconf=$paconf ./getmirrors.py # remove ./ in final version
  exit 0
}

usage() {
  debug "usage('$@')"
  echo "Usage: $(basename $0) [OPTIONS] [PACKAGES]" # is this better than $0?
  echo "Create CCR-ready source packages from packages in AUR or Arch repos"
  echo "Example: $(basename $0) twisted" ;  echo 
  echo "General: "
  echo "  -m <maintainer>	  add maintainer information to each PKGBUILD before building"
  echo "  (--maintainer <m...>)   <maintainer> should be in the form 'My Name (nick) <me@example.com>'"
  echo "  -e, --edit		  edit the PKGBUILD for each package with \$EDITOR before building"
  echo "  -c, --consolidate	  move all CCR source packages into the working directory"
  echo "  -i, --install		  install packages that build successfully, in order to test them" ; echo
  echo "Advanced: "
  echo "  -f, --from-src <file>   create a CCR source package from source package <file>"
  echo "  -u, --from-url <URL>	  ... or from an AUR/CCR-compatible source package at <URL>"
  echo "  -d, --from-dir <dir>	  ... or from a PKGBUILD and (optional) other files in <dir>"
  echo "  -C, --cd <newdir>	  use <newdir> as the working directory instead of the current dir"
  echo "  -t, --temp		  use '$tmpdir' as the build directory instead of the current dir"
  echo "        		  (all finished src packages will be moved into the working dir, like -c)"
  echo "  -l, --log <logfile>	  use 'tee' to send all aur2ccr messages to <logfile>" ; echo
  echo "Other: "
  echo "  -s, --setup		  perform setup-related tasks, such as choosing the best Arch mirror"
  echo "  -a, --addad		  add an aur2ccr advertisement - add as Contributer: "
  echo "        		  'aur2ccr (http://ddg.gg/?q=!ccr+aur2ccr)'"
  echo "  -h, --help		  display this help and exit"
  echo "  -v, --version		  print version information and exit" ; echo 
  echo "For debugging, use: debug=1 $(basename $0) [OPTIONS] [PACKAGES]" ; echo 
  echo "Report bugs at: <https://github.com/redhat69/aur2ccr/issues/>"
  echo "aur2ccr home: <https://github.com/redhat69/aur2ccr/>" ; debug "exiting..."
  exit 0
}

# helper function for popopt
validate_option() {
  if [[ "$1" == "" ]]; then
    return 127
  elif [[ $(echo "$1" | cut -c 1) == "-" ]]; then
    err "option parameter must not start with - "
    exit 1
  else
    return 0
  fi
}

# global variable where the package names are stored
packages=""

popopts() {  # populate variables, enumerate options and arguments
  debug "popopts('$@')"
  while [[ "$1" != "" ]];  do
    debug "current option $1"
    case "$1" in
      "-m"|"--maintainer") shift
        if validate_option "$1";  then
          maintainer="$1";
        else
          err "missing maintainer" && exit 2;
        fi;;
      "-e"|"--edit") edit=1;;
      "-c"|"--consolidate") consolidate=1;;
      "-f"|"--from-src") shift
        if validate_option "$1"; then
          file="$1";
        else
          err "missing source file" && exit 3;
        fi;;
      "-u"|"--from-url") shift
        if validate_option "$1" ; then
          url="$1";
        else
          err "missing url" && exit 4;
        fi;;
      "-d"|"--from-dir") shift
        if validate_option "$1"; then
          pkgdir="$1"
        else
          err "missing directory" && exit 5;
        fi;;
      "-C"|"--cd") shift
        if validate_option "$1"; then
          startdir="$1" finddir="$1"
        else
          err "missing directory" && exit 6;
        fi;;
      "-t"|"--temp") startdir="$tmpdir"
        consolidate=1;;
      "-l"|"--log") shift
        if validate_option "$1"; then
          logfile="$1"
          touch "$logfile" >&2> /dev/null
          if ! test -w "$logfile"; then
            err "specified log file '$logfile' is not writable"
            exit 8
          fi;
          echo >> "$logfile"
          echo "+++++  aur2ccr logfile, started $(date)  +++++" >> "$logfile"
          echo >> "$logfile"
        else
          err "missing logfile" && exit 8
        fi;;
      "-i"|"--install") install=1;;
      "-s"|"--setup") setup;;
      "-h"|"--help") usage;;
      "-v"|"--version") echo "$pname $pver" && exit 0;;
      "-a"|"--addad") addad=1;;
      # match every other option starting with -, followed by two or more chars
      -[a-z][a-z]*) # replace -foo therest with -f -o -o therest
      # split the option string, add a - before every option
      argops=$(echo "$1"|echo $(fold -w1)) stmp=""
      for char in $noargops; do
        case "$char" in
          "m"|"f"|"u"|"d"|"C"|"l") debug "$char" && break;;
          *) argops=${argops:1}&&stmp=${stmp}" "${char}
        esac
      done
      debug start $stmp; debug $argops end
      local tmp=$(echo "$1"|echo $(fold -w1)|sed -e 's/ / -/g'|cut -c2- && shift)
      debug "tmp=" $tmp
      set -- $tmp "${@:2}"
      debug "new options" "$@"
      continue  ;;
      # package names won't start with - or --, so we can catch invalid options
      -[a-z]|--[a-z]*) err "$1 is not a valid option" && exit 9;;
      *) packages="$packages $1";;
    esac
  shift
done
debug "args is $args"
[[ -z "$packages" && -z "$url" && -z "$file" && -z "$pkgdir" ]] && (err "You did not specify any packages to build"; err "There is nothing to do. Exiting..."; exit 0) && exit 1
}

# main()
debug "main('$@')"
# prevent running the script as root
([[ $EUID -eq 0 ]] && (err "This script must not be run as root!"; err "aur2ccr will ask for your password if needed."; \
  err "Exiting..."; debug "script run as root, exiting"; exit 0) && exit 0) && exit 1
# test for important programs that may not be installed 
for bin in ${programs[@]}; do
  debug "checking for $bin..."
  if [[ -x "$(which $bin 2>/dev/null)" ]]; then
    debug " found"
    continue
  else
    debug " not found"; err "Sorry, you need '$bin' to use this script."; err "Try running 'sudo pacman -Sy abs base-devel ccr cmake curl gawk jshon sed'"
    exit 1
  fi
done

# load setting from config files, prefer local over global
if [[ -r "$confdir/$acconf" ]]; then
  debug "found global conf, using"
  . "$confdir/$acconf"
fi; if [[ -r "$lconfdir/$acconf" ]]; then
  debug "found local conf, using"
  . "$lconfdir/$acconf"
fi # if none exist, just use default values
mkdir -p "$tmpdir" || (err "tmpdir '$tmpdir' is a file!"; exit 1) || exit 1 # make the temp dir, if it does not already exist
# find other config files, and set variables to point to them- prefer global over local
if [[ -r "$confdir/$apconf" ]]; then
  debug "found global pacman conf, using"
  paconf="$confdir/$apconf"
elif [[ -r "$lconfdir/$apconf" ]]; then
  debug "found local pacman conf, using"
  paconf="$lconfdir/$apconf"
else 
  debug "could not find local or global pacman conf, using $tmpdir/pacman.conf.tmp instead"
  printf '[community]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[core]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[extra]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[multilib]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/x86_64\n' > "$tmpdir/pacman.conf.tmp"
  paconf="$tmpdir/pacman.conf.tmp"
fi; if [[ -r "$confdir/$namesconf" ]]; then
  debug "found global names.conf, using"
  namesconf="$confdir/$namesconf"
elif [[ -r "$lconfdir/$namesconf" ]]; then
  debug "found local names.conf, using"
  namesconf="$lconfdir/$namesconf"
fi
# fix empty/unset variables to prevent errors
pname="${pname-aur2ccr}"                 pver="${pver-0.7}"
confdir="${confdir-/etc/aur2ccr}"        lconfdir="${lconfdir-~/.aur2ccr}" 
tmpdir="${tmpdir-/tmp}"                  namesconf="${namesconf-names.conf}"
apconf="${apconf-archrepos.pacman.conf}" acconf="${acconf-aur2ccr.conf}" 
startdir="${startdir-$(pwd)}"            findir="${findir-$(pwd)}" 
consolidate="${consolidate-0}"           edit="${edit-0}" addad="${addad-0}" 
[[ -z "$1" || "$1" == "--help" || "$1" == "-h" ]] && usage
popopts "$@"
debug "setting trap"; trap clean INT  # trap keyboard interrupts (^C), in order to clean up temp files
debug "entering 'for' loop"
for pkgname in $packages; do
  debug "checking $pkgname"
  debug "$pkgname has to be at least two characters long"
  echo "$pkgname" | grep -q '^..' || (err "Package names must be at least two characters in length"; exit 1) || exit 1 # if the package name is not at least 2 chars, lots of stuff wiull fail.
  if isinccr $pkgname; then
    msg "$pkgname is already in CCR or main Chakra repos."
    msg -n "Continue anyway? [y/N] "
    read ans
    if [[ -z "$ans" || "$ans" == "n" || "$ans" == "N" || "$ans" == "no" ]]; then 
      warn "Skipping $pkgname"; continue
    else 
      checkaur $pkgname
    fi
  elif namelookup $pkgname; then
    msg "$apkgname is already in CCR or main Chakra repos as $cpkgname."
    msg -n "Continue anyway? [y/N] "; read ans
    if [ -z "$ans" -o "$ans" == "n" -o "$ans" == "N" -o "$ans" == "no" ]; then 
      warn "Skipping $pkgname"; continue
    else 
      checkaur $pkgname
    fi
  elif vcsver $pkgname; then
    msg "$pkgname is already in CCR or main Chakra repos as $vpkgname."
    msg -n "Continue anyway? [y/N] "; read ans
    if [[ -z "$ans" || "$ans" == "n" || "$ans" == "N" || "$ans" == "no" ]]; then 
      warn "Skipping $pkgname"; continue
    else 
      checkaur $pkgname
    fi
  else
    checkaur $pkgname
  fi
done
[[ -n "$url" ]] && makeccrpkg_u || logerr $url
[[ -n "$file" ]] && makeccrpkg_f || logerr $file
[[ -n "$pkgdir" ]] && makeccrpkg_d || logerr $pkgdir
# finish up
if [[ "$badpkgs" -gt 0 ]]; then
  err "$badpkgs package(s) failed"
  debug "at least $badpkgs packages failed..."
else
  msg "$badpkgs package(s) failed"; debug "0 pkgs failed, exiting..."
  warn "Remember, just because aur2ccr seems to have succeeded, does not mean the package(s)"
  warn "will work. Please thoroughly test all packages BEFORE uploading them to CCR."
  warn "Broken packages may be removed without warning."
  exit 0
fi
([[ -n "$failedpkgs" ]] && (err "The bad package(s) are:"; err "$failedpkgs"; debug "exiting..."; exit 1)) || exit 0
