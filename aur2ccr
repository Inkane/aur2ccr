# #!/bin/bash
# aur2ccr - version 0.5.5
# Pull information from AUR or Arch repos, and make source packages that are ready for uploading to CCR.
# Usage: aur2ccr [OPTIONS] [PACKAGES]
# Todo: add the ability to grab packages from Arch repos; 
#	remove redundant code;
#	add ability to check if ${pkgname}-git exists in CCR/Chakra repos;
#	improve popopts function, to allow options to be used like '-ce';
#	add the ability to automatically upload packages to CCR (if possible);
# This script uses the information on converting Arch/AUR files to CCR from http://chakra-linux.org/wiki/index.php/How_to_upload_a_package_to_CCR_when_it_exists_on_Arch_or_Aur
# Portions of this script may have been taken from "CCR - A Chakra Community Repository helper", which was in turn forked from "Packer by Matthew Bruenig <matthewbruenig@gmail.com>", a GPL3 bash script.

# internal settings - not all of these are used yet, but they will be someday
pname="aur2ccr"
pver="0.5.5"
confdir="/etc/aur2ccr"
lconfdir="~/.aur2ccr"
tmpdir="/tmp"
namesconf="names.conf"
apconf="archrepos.pacman.conf"
acconf="aur2ccr.conf"

# initialize variables
startdir="$(pwd)"
badpkgs=0
consolidate=0
edit=0
addad=0
archrinit=0
newline='
'
RED='\e[0;31m'
BLUE='\e[0;34m'
programs=( abs autoconf automake bison ccr ed flex gcc libtool m4 make makepkg patch packer )

for bin in ${programs[@]}; do  # test for important programs that may not be installed 
  if test -x "$(which $bin 2>/dev/null)"; then
    continue
  else
    echo "Sorry, you need '$bin' to use this script."
    echo "Try running: sudo pacman -Sy abs base-devel ccr packer"
    exit 1
  fi
done

msg() { # make aur2ccr's messages prettier and more unified.
  echo -n #dummy
}

err() { # make aur2ccr's error messages prettier and more unified.
  echo -n #dummy
}

clean() {  # clean up temp files
  if [ -z "$1" ]; then
    echo "aur2ccr: Keyboard interrupt caught, cleaning up..."
    rm -f pacman.conf.tmp
    exit 1
  else
    echo -n # this may be used later to clean up something else
  fi
}

initarchr() {	# set up the arch repo vars, so we only need to sudo once
  printf '[community]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[core]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[extra]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[multilib]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/x86_64\n' > pacman.conf.tmp
  if (sudo pacman -Sy --config pacman.conf.tmp); then
    areplist=$(pacman --config pacman.conf.tmp -Ssq)
    afullist=$(pacman --config pacman.conf.tmp -Ss)
    archrinit=1
    sudo pacman -Sy >&2> /dev/null
    rm pacman.conf.tmp
  else
    echo "aur2ccr: An error occurred while checking Arch repos."
    rm pacman.conf.tmp
    exit 1 # you can't call this in an if, (like if initarchr) because the vars will be unset
  fi
}

grepacfull() {  # grep the output of pacman -Ss in a useful manner
  if [ "$archrinit" == 0 ]; then 
    initarchr
  fi
  local num=0
  local ret=0
  IFS="$newline"
  for line in $afullist; do
    if [ "$num" == 0 ]; then
      entry="${line}${newline}"
      num=1
    elif [ "$num" == 1 ]; then
      entry="${entry}${line}"
      num=0
      if (echo "$entry" | grep -iq "$1"); then # this is slow [avg 45-50s total], we need a better way. would perl be faster?
        echo "$entry"
        local ret=1
      fi
    fi
  done
  if [ "$ret" == 0 ]; then
    echo " (nothing found)"
  fi
}

isinccr() {  # check in CCR and main repos for package
  if !(ccr -Ssq $1 | grep -q "^$1$"); then
    if (pacman -Ssq $1 | grep -q "^$1$"); then 
      return 0
    else
      return 1
    fi
  else
    return 0
  fi
}

isinrepos() {  # check in main Chakra repos for package
  if (pacman -Ssq $1 | grep -q "^$1$"); then 
    return 0
  else
    return 1
  fi
}

isinaur() {
  if !(echo "$1" | grep -q '^..'); then  # if the package name is not at least 2 chars, checking aur will fail.
    echo "aur2ccr: Package names must be at least two characters in length"
    exit 1
  fi
  if (wget -q --spider https://aur.archlinux.org/packages/$(echo "$1" | sed 's/\(..\).*/\1/')/$1/PKGBUILD); then
    return 0
  else 
    return 1
  fi
}


isinarchr() {
  echo "aur2ccr: Checking Arch repos..."
  if [ "$archrinit" == 0 ]; then
    initarchr  
  fi # we don't need an else, the rest is below and the vars are already set

  if (echo "$areplist" | grep -q "^$1$" ); then
    return 0
  else
    return 1
  fi # much nicer than the old function
}

getarchname() {
  if isinarchr $1; then
    archname=$(echo "$afullist" | grep -o "^[^ ]*/$1\s" | sed 's/\s//g')
  else
    echo "aur2ccr: '$1' not found in arch repos"
    return 1
  fi
}

depends() {
  depends=$(grep '^depends=' PKGBUILD | sed "s/depends=(['\"]\(.*\)['\"])/\1/; s/['\"]//g")
  depends="$depends $(grep '^makedepends=' PKGBUILD | sed "s/makedepends=(['\"]\(.*\)['\"])/\1/; s/['\"]//g")"
  depends="$(echo "$depends" | sed "s/makedepends=(['\"]*)//")"
  depends="$(echo "$depends" | sed "s/makedepends=(\([^'\"]*\))/\1/")"
  depends="$(echo "$depends" | sed "s/depends=(['\"]*)//")"
  depends="$(echo "$depends" | sed "s/depends=(\([^'\"]*\))/\1/")"
  depends="$(echo "$depends" | sed "s/.*(\(.*\)/\1/")" # PLEASE, just quote your depends! It's not that hard! 
  depends="$(echo "$depends" | sed "s/\(.*\))/\1/")"   # depends=('every' 'single' 'dependency')
  odepends=$depends; depends=
  for depend in $odepends; do # get rid of packagename>=V.E.R stuff
    depends="$depends $(echo $depend | sed 's/\(.*\)>.*/\1/')"
  done
}

addmaintainer() { # this is wrong, I need to beef up the function a little.
#  if  
#    
#  fi
  ed -s PKGBUILD << EOF | sed 's/#\sContributer/ Previous Maintainer/'
1s/Maintainer/Contributer
1i
# Maintainer: $1
.
wq
EOF
}

addad() {
  ed -s PKGBUILD << EOF && echo "aur2ccr: Ad added. Thanks for supporing aur2ccr! :)"
2i
# Contributer: aur2ccr (http://chakra.sourceforge.net/ccr/packages.php?K=aur2ccr)
.
wq
EOF
}

dotherest() {
  local pkgname=$1
  depsnotinrep=0
  if [ "$edit" -eq 1 ]; then
    echo "aur2ccr: Opening '$pkgname' PKGBUILD with $EDITOR"
    $EDITOR PKGBUILD
  fi
  depends
  for pkg in $depends; do 
    if isinccr $pkg; then 
      echo "aur2ccr: $pkgname dependency '$pkg' already in CCR or repos, continuing"
      if !(isinrepos $pkg); then
        let depsnotinrep=$depsnotinrep+1
      fi
    elif namelookup $pkg; then
      namelookup $pkg
      if !(namechange $pkg); then
        echo "aur2ccr: Something went wrong while attempting to edit the $pkg PKGBUILD"
        return 1
      fi
      if isinccr $cpkgname; then
        echo "aur2ccr: $pkgname dependency '$apkgname' already in CCR or repos as '$cpkgname', continuing"
        if !(isinrepos $cpkgname); then
          let depsnotinrep=$depsnotinrep+1
        fi
      else 
        echo "aur2ccr: There seems to be a bad definition in $confdir/$namesconf. Please fix this."
        echo "aur2ccr: The offending line is: '$apkgname=$cpkgname'"
        let badpkgs=$badpkgs+1
        return 1
      fi
    else
      let depsnotinrep=$depsnotinrep+1
      echo "aur2ccr: $pkgname dependency '$pkg' not in CCR or repos, looking at Arch packages"
      if isinaur $pkg; then
        pushd "$(pwd)" >/dev/null
        if !(makeccrpkg $pkg); then
          echo "aur2ccr: Some error occurred while building '$pkg'"
          echo "aur2ccr: Without this dependency, $pkgname cannot be built"
          popd >/dev/null
          return 1
        else
          popd >/dev/null
        fi
      elif isinarchr $pkg; then
        echo "aur2ccr: '$pkg' found in the Arch repos..."
        pushd "$(pwd)" >/dev/null
        if !(makeccrpkg_r $pkg); then 
          echo "aur2ccr: Some error occurred while building '$pkg'"
          echo "aur2ccr: Without this dependency, $pkgname cannot be built"
          popd >/dev/null
          return 1
        else
          popd >/dev/null
        fi
      else
        echo "aur2ccr: Sorry, dependency '$pkg' cannot be found."
        echo "aur2ccr: Without this dependency, $pkgname cannot be built"
        let badpkgs=$badpkgs+1
        return 1
      fi
    fi
  done
  if [ "$depsnotinrep" -eq 0 ]; then
    echo "Testing package '$pkgname'..."
    if !(makepkg -sfr); then
      echo "aur2ccr: Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
      let badpkgs=$badpkgs+1
      failedpkgs="$failedpkgs $pkgname"
      return 1
    fi
  else
    echo "aur2ccr: Package '$pkgname' has dependencies outside of CCR or Chakra repos."
    echo "aur2ccr: Running 'makepkg -s' on this package will fail, so we cannot test it now."
    echo "aur2ccr: Please test the final .src.tar.gz package manually with ccr."
  fi
  if [ -n "$maintainer" ]; then
    echo "aur2ccr: Changing maintainer information..."
    addmaintainer "$maintainer"
    echo "aur2ccr: Done"
  fi
  if [ "$addad" == 1 ]; then
    addad
  fi
  makepkg -gf
  if (makepkg --source -f); then
    echo "aur2ccr: Package '$pkgname' built successfully."
    if [ "$consolidate" -eq 1 ]; then
      pkgpkg="$(ls $pkgname*.src.tar.gz)"
      mv $pkgpkg "$startdir"
      echo "aur2ccr: $pkgpkg moved to $startdir"
    fi
  else
    echo "aur2ccr: Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  return 0
}

makeccrpkg() {    # grab a package from AUR, and make it into a CCR-ready src package
  cd "$startdir"
  local pkgname=$1
  mkdir -p "$pkgname"
  cd "$pkgname"
  if test -r "$pkgname.tar.gz"; then 
    rm "$pkgname.tar.gz"
  fi
  if !(wget "https://aur.archlinux.org/packages/$(echo "$pkgname" | sed 's/\(..\).*/\1/')/$pkgname/$pkgname.tar.gz"); then
    echo "aur2ccr: There was an error while trying to download the package."
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  if !(tar -xzf "$pkgname.tar.gz" && rm "$pkgname.tar.gz"); then
    echo "aur2ccr: tar could not extract the archive"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  cd "$pkgname"

  if dotherest "$pkgname"; then
    return 0
  else
    return 1
  fi
}


makeccrpkg_r() {    # grab a package from Arch repos, and make it into a CCR-ready src package
  cd "$startdir"
  local pkgname=$1
  mkdir -p "$pkgname"
  cd "$pkgname"
  if test -r "$pkgname.tar.gz"; then 
    rm "$pkgname.tar.gz"
  fi
  #
  #	get Arch package with PKGBUILD, .install, etc, using git or perl script or whatever 
  #
  # extract the package if needed
  #
  getarchname $pkgname
  if [ "$archname" == 0 ]; then
    echo "aur2ccr: '$pkgname' cannot be found"
    return 1
  fi # else...
  echo "aur2ccr: found '$pkgname' as '$archname'"
  if (sudo abs "$archname"); then
    rm -rf "./$pkgname"
    if (sudo mv "/var/abs/$archname" "./$pkgname"); then
      if (sudo chown -hR $USER:$GROUP "./$pkgname"); then
        echo "aur2ccr: $pkgname info retrieved from Arch repos successfully"
      else
        echo "aur2ccr: chown failed"
	return 1
      fi
    else
      echo "aur2ccr: could not move /var/abs/$archname to working dir"
      let badpkgs=$badpkgs+1
      return 1
    fi
  else
    echo "aur2ccr: abs failed"
    let badpkgs=$badpkgs+1
    return 1
  fi
  #
  #  ^ this is a quick fix ^
  #
  cd "$pkgname" #this should cd to wherever the stuff above put the PKGBUILD
  if dotherest "$pkgname"; then
    return 0
  else
    return 1
  fi
}
  
makeccrpkg_u() {
  cd "$startdir"
  local pkgname="$(basename "$url" | sed 's/\([^\.]\)\..*/\1/')"  # if $url is http://example.com/path/package.tar.gz, $pkgname is set to "package".
  mkdir -p "$pkgname"
  cd "$pkgname"
  myfile="$BASHPID-$(basename "$url")"
  if !(wget -O "$myfile" "$url"); then 
    echo "aur2ccr: There was an error while trying to download the package"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  dir="$(tar -taf "$myfile" | head -1)"
  if !(tar -xaf "$myfile"); then
    echo "aur2ccr: tar could not extract the archive"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  cd "$dir"
  if ! test -r PKGBUILD; then
    echo "aur2ccr: The package you specified does not seem to be a valid source archive."
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  if dotherest "$pkgname"; then
    return 0
  else
    return 1
  fi
}


makeccrpkg_f() {
  cd "$startdir"
  if ! test -r "$file"; then
    echo "aur2ccr: '$file' cannot be opened or does not exist"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  local pkgname="$(basename "$file" | sed 's/\([^\.]\)\..*/\1/')"
  mkdir -p "$pkgname"
  dir="$(tar -taf "$file" | head -1)"
  if !(tar -xaf "$file" -C "$pkgname"); then
    echo "aur2ccr: tar could not extract the archive"
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi
  cd "$pkgname"
  cd "$dir"
  if ! test -r PKGBUILD; then
    echo "aur2ccr: The package you specified does not seem to be a valid source archive."
    let badpkgs=$badpkgs+1
    failedpkgs="$failedpkgs $pkgname"
    return 1
  fi

  if dotherest "$pkgname"; then
    return 0
  else
    return 1
  fi
}


namelookup() {  # see https://github.com/redhat69/aur2ccr/issues/1
  if test -r "$confdir/$namesconf"; then
    if (grep -q "$1=..*" "$confdir/$namesconf"); then
      apkgname="$1"
      cpkgname="$(grep "^$1=..*" "$confdir/$namesconf" | sed "s/$1=//")"
    else
      return 1
    fi
  else 
    return 1
  fi
  return 0
}

namechange() {
  local pkg=$1
  depends
  for pkg in $depends; do 
    if namelookup $pkg; then
      namelookup $pkg
      if (sed -i "s/\([(\s'\"]*\)${apkgname}\([\s'\")]*\)/\1${cpkgname}\2/g" PKGBUILD); then
        return 0
      else
        return 1
      fi
    fi
  done
}

aursearch() {  # uses 'packer'
  packer --auronly -Ss $1
}

pkgsearch() { # there is no reason for this function to ever be called except right after isinarchr returns 1
  echo "Package '$1' not found in AUR or Arch repos."
  echo "Did you mean: "
  local aurpkgs="$(aursearch $1)"
  if [ -n "$aurpkgs" ]; then
    echo "$aurpkgs"
    exit 1
  else
    grepacfull $1
    exit 1
  fi
}

checkaur() {
  if isinaur $1; then 
    echo "aur2ccr: '$1' found in AUR..."
    if !(makeccrpkg $1); then
      let badpkgs=$badpkgs+1
      failedpkgs="$failedpkgs $1"
    fi
  elif isinarchr $1; then
    echo "aur2ccr: '$1' found in the Arch repos..."
    if !(makeccrpkg_r $1); then
      let badpkgs=$badpkgs+1
      failedpkgs="$failedpkgs $1"
    fi
  else
    pkgsearch $1
  fi
}

usage() {
  echo "Usage: $0 [OPTIONS] [PACKAGES]"
  echo "Create CCR-ready source packages from packages in AUR or Arch repos"
  echo "Example: $0 twisted"
  echo 
  echo "Options: "
  echo "  -m <maintainer>	add maintainer information to each PKGBUILD before building"
  echo "                	<maintainer> should be in the form 'My Name (nick) <me@example.com>'"
  echo "  -e			edit the PKGBUILD for each package with \$EDITOR before building"
  echo "  -a			add an aur2ccr advertisement - add as Contributer: "
  echo "        		'aur2ccr (http://chakra.sourceforge.net/ccr/packages.php?K=aur2ccr)'"
  echo "  -c			move all CCR source packages into the working directory"
  echo "  -f <file>		create a CCR source package from source package <file>"
  echo "  -u <URL>		... or from an AUR/CCR-compatible source package at <URL>"
  echo "  -h			display this help and exit"
  echo "  -v			print version information and exit"
  echo 
  echo "Note: Options must be specified separately, like '-c -e', not '-ce'."
  echo "This will (hopefully) be fixed in a future version."
  echo 
  echo "Report bugs at: <https://github.com/redhat69/aur2ccr/issues/>"
  echo "aur2ccr home: <https://github.com/redhat69/aur2ccr/>"
  exit 0
}

popopts() {  # populate variables, enumerate options and arguments -- crappy - if you have a better way, *please* tell me
  for arg in "$@"; do 
    if [ -n "$isfile" -a "$isfile" == 1 ]; then
      file="$arg"
      isfile=0
      continue
    elif [ -n "$isurl" -a "$isurl" == 1 ]; then 
      url="$arg"
      isurl=0
      continue
    elif [ -n "$ismaint" -a "$ismaint" == 1 ]; then
      maintainer="$arg"
      ismaint=0
      continue
    fi
    if [ -n "$arg" -a "$arg" == "-m" ]; then
      ismaint=1
    elif [ -n "$arg" -a "$arg" == "-e" ]; then
      edit=1
    elif [ -n "$arg" -a "$arg" == "-c" ]; then
      consolidate=1
    elif [ -n "$arg" -a "$arg" == "-f" ]; then
      isfile=1
    elif [ -n "$arg" -a "$arg" == "-u" ]; then
      isurl=1
    elif [ -n "$arg" -a "$arg" == "-h" ]; then
      usage
    elif [ -n "$arg" -a "$arg" == "-v" ]; then
      echo "$pname $pver"
      exit 0
    elif [ -n "$arg" -a "$arg" == "-a" ]; then
      addad=1
    else
      args="$args $arg"
    fi
  done
  if [ -z "$args" -a -z "$url" -a -z "$file" ]; then 
    echo "You did not specify any packages to build"
    echo "There is nothing to do. Exiting..."
    exit 1
  fi
}

# main()
if [ -z "$1" -o "$1" == "--help" ]; then  # if no arguments were supplied, print usage info
  usage
fi

popopts "$@"

trap clean INT  # trap keyboard interrupts (^C), in order to clean up temp files

for pkgname in $args; do
  if isinccr $pkgname; then
    echo "$pkgname is already in CCR or main Chakra repos."
    echo -n "Continue anyway? [y/N] "
    read ans
    if [ -z "$ans" -o "$ans" == "n" -o "$ans" == "N" ]; then 
      echo "Skipping $pkgname"
      continue
    else 
      checkaur $pkgname
    fi
  elif namelookup $pkgname; then
    echo "$apkgname is already in CCR or main Chakra repos as $cpkgname."
    echo -n "Continue anyway? [y/N] "
    read ans
    if [ -z "$ans" -o "$ans" == "n" -o "$ans" == "N" ]; then 
      echo "Skipping $pkgname"
      continue
    else 
      checkaur $pkgname
    fi
  else
    checkaur $pkgname
  fi
done
if [ -n "$url" ]; then
  makeccrpkg_u
fi; if [ -n "$file" ]; then
  makeccrpkg_f
fi

echo "aur2ccr: $badpkgs package(s) failed"
if [ -n "$failedpkgs" ]; then 
  echo "aur2ccr: The bad package(s) are:"
  echo -n "aur2ccr:"
  echo "$failedpkgs" >&2
fi
