# #!/bin/bash
# aur2ccr - version 0.5.1
# Pull information from AUR or Arch repos, and make source packages that are ready for uploading to CCR.
# Usage: aur2ccr [OPTIONS] [PACKAGES]
# Todo: add the ability to grab packages from Arch repos; 
#	add ability to search for packages in AUR as well as Arch repos;
#	remove redundant code;
#	add man page aur2ccr(8);
#	improve popopts function, to allow options to be used like '-ce';
#	add the ability to automatically upload packages to CCR (if possible);
# This script uses the information on converting Arch/AUR files to CCR from http://chakra-linux.org/wiki/index.php/How_to_upload_a_package_to_CCR_when_it_exists_on_Arch_or_Aur

# internal settings
pname="aur2ccr"
pver="0.5"
confdir="/etc/aur2ccr"
namesconf="names.conf"

# initialize variables
startdir="$(pwd)"
badpkgs=0
consolidate=0
edit=0


for bin in ccr makepkg pacman; do	# test for important programs that may not be installed
	if test -x "$(which $bin 2>/dev/null)"; then
		continue
	else
		echo "aur2ccr: Sorry, you need '$bin' to use this script."
		exit 1
	fi
done

clean() {	# clean up temp files
	if [ -z "$1" ]; then
		echo "aur2ccr: Keyboard interrupt caught, cleaning up..."
		rm -f pacman.conf.tmp
		exit 1
	else
		echo -n # this may be used later to clean up something else
	fi
}

isinccr() {	# check in CCR and main repos for package
	if !(ccr -Ssq $1 | grep -q "^$1$"); then
		if (pacman -Ssq $1 | grep -q "^$1$"); then 
			return 0
		else
			return 1
		fi
	else
		return 0
	fi
}

isinaur() {
	if !(echo "$1" | grep -q '^..'); then  # if the package name is not at least 2 chars, checking aur will fail.
		echo "aur2ccr: Package names must be at least two characters in length"
		exit 1
	fi
	if (wget -q --spider https://aur.archlinux.org/packages/$(echo "$1" | sed 's/\(..\).*/\1/')/$1/PKGBUILD); then
		return 0
	else 
		return 1
	fi
}

isinarchr() {
	echo "Checking Arch repos..."
	if [ -z "$archreplist" ]; then
		printf '[community]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[core]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[extra]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[multilib]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/x86_64\n' > pacman.conf.tmp
		sudo pacman -Sy --config pacman.conf.tmp # this requires root privileges, so it is not the best solution. If anyone thinks of something better, let me know.
		if (pacman -Ssq --config pacman.conf.tmp $1 | grep -q "^$1$"); then
			archreplist="$(pacman -Ssq --config pacman.conf.tmp)"
			rm -f pacman.conf.tmp
			sudo pacman -Sy >&2> /dev/null &
			return 0
		else
			archreplist="$(pacman -Ssq --config pacman.conf.tmp)"
			rm -f pacman.conf.tmp
			return 1
		fi
	else
		if (echo "$archreplist" | grep -q "^$1$"); then
			return 0
		else
			return 1
		fi
	fi
}

depends() {
	depends=$(grep '^depends=' PKGBUILD | sed "s/depends=(['\"]\(.*\)['\"])/\1/; s/['\"]//g")
	depends="$depends $(grep '^makedepends=' PKGBUILD | sed "s/makedepends=(['\"]\(.*\)['\"])/\1/; s/['\"]//g")"
	depends="$(echo "$depends" | sed "s/makedepends=(['\"]*)//")"
	depends="$(echo "$depends" | sed "s/depends=(['\"]*)//")"
	depends="$(echo "$depends" | sed "s/depends=(\([^'\"]*\))/\1/")"
	depends="$(echo "$depends" | sed "s/makedepends=(\([^'\"]*\))/\1/")"
	depends="$(echo "$depends" | sed "s/.*(\(.*\)/\1/")" # PLEASE, just quote your depends! It's not that hard! 
	depends="$(echo "$depends" | sed "s/\(.*\))/\1/")"   # depends=('every' 'single' 'dependency')
	odepends=$depends; depends=
	for depend in $odepends; do # get rid of packagename>=V.E.R stuff
		depends="$depends $(echo $depend | sed 's/\(.*\)>.*/\1/')"
	done
}

addmaintainer() {
	ed -s PKGBUILD << EOF | sed 's/#\sContributer/ Previous Maintainer/'
1s/Maintainer/Contributer
1i
# Maintainer: $1
.
wq
EOF
}

makeccrpkg() {		# grab a package from AUR, and make it into a CCR-ready src package
	cd "$startdir"
	local pkgname=$1
	mkdir -p "$pkgname"
	cd "$pkgname"
	if test -r "$pkgname.tar.gz"; then 
		rm "$pkgname.tar.gz"
	fi
	if !(wget "https://aur.archlinux.org/packages/$(echo "$pkgname" | sed 's/\(..\).*/\1/')/$pkgname/$pkgname.tar.gz"); then
		echo "aur2ccr: There was an error while trying to download the package."
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	if !(tar -xzf "$pkgname.tar.gz" && rm "$pkgname.tar.gz"); then
		echo "aur2ccr: tar could not extract the archive"
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	cd "$pkgname"
	depsnotinccr=0
	if [ "$edit" -eq 1 ]; then
		echo "aur2ccr: Opening '$pkgname' PKGBUILD with $EDITOR"
		$EDITOR PKGBUILD
	fi
	depends
	for pkg in $depends; do 
		if isinccr $pkg; then 
			echo "aur2ccr: $pkgname dependency '$pkg' already in CCR or repos, continuing"
		elif namelookup $pkg; then
			if isinccr $cpkgname; then
				echo "aur2ccr: $pkgname dependency '$apkgname' already in CCR or repos as '$cpkgname', continuing"
			else 
				echo "aur2ccr: There seems to be a bad definition in $confdir/$namesconf. Please fix this."
				echo "aur2ccr: The offending line is: '$apkgname=$cpkgname'"
				let badpkgs=$badpkgs+1
				return 1
			fi
		else
			let depsnotinccr=$depsnotinccr+1
			echo "aur2ccr: $pkgname dependency '$pkg' not in CCR or repos, looking at Arch packages"
			if isinaur $pkg; then
				pushd "$(pwd)"
				if !(makeccrpkg $pkg); then
					echo "aur2ccr: Some error occurred while building '$pkg'"
					echo "aur2ccr: Without this dependency, $pkgname cannot be built"
					return 1
				fi
				popd
			elif isinarchr $pkg; then
				echo "'$pkg' is in the Arch repos, but this feature is not ready yet."
				let badpkgs=$badpkgs+1
				failedpkgs="$failedpkgs $pkgname"
				return 1
				#makeccrpkg_r $pkg
			else
				echo "aur2ccr: Sorry, dependency '$pkg' cannot be found."
			fi
		fi
	done
	if [ "$depsnotinccr" -eq 0 ]; then
		echo "Testing package '$pkgname'..."
		if !(makepkg -sfr); then
			echo "aur2ccr: Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
			let badpkgs=$badpkgs+1
			failedpkgs="$failedpkgs $pkgname"
			return 1
		fi
	else
		echo "aur2ccr: Package '$pkgname' has dependencies outside of CCR or Chakra repos."
		echo "aur2ccr: Running 'makepkg -s' on this package will fail, so we cannot test it now."
		echo "aur2ccr: Please test the final .src.tar.gz package manually with ccr."
	fi
	if [ -n "$maintainer" ]; then
		echo "aur2ccr: Changing maintainer information..."
		addmaintainer "$maintainer"
		echo "aur2ccr: Done"
	fi
	if (makepkg --source -f); then
		echo "aur2ccr: Package '$pkgname' built successfully."
		if [ "$consolidate" -eq 1 ]; then
			pkgpkg="$(ls $pkgname*.src.tar.gz)"
			mv $pkgpkg "$startdir"
			echo "aur2ccr: $pkgpkg moved to $startdir"
		fi
	else
		echo "aur2ccr: Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	return 0
}

makeccrpkg_r() {		# grab a package from Arch repos, and make it into a CCR-ready src package
	cd "$startdir"
	local pkgname=$1
	mkdir -p "$pkgname"
	cd "$pkgname"
	if test -r "$pkgname.tar.gz"; then 
		rm "$pkgname.tar.gz"
	fi
	#
	#	get Arch package with PKGBUILD, .install, etc, using git or perl script or whatever 
	#
	# extract the package if needed
	cd "$pkgname" #this should cd to wherever the stuff above put the PKGBUILD
	depsnotinccr=0
	if [ "$edit" -eq 1 ]; then
		echo "aur2ccr: Opening '$pkgname' PKGBUILD with $EDITOR"
		$EDITOR PKGBUILD
	fi
	depends
	for pkg in $depends; do 
		if isinccr $pkg; then 
			echo "aur2ccr: $pkgname dependency '$pkg' already in CCR or repos, continuing"
		elif namelookup $pkg; then
			if isinccr $cpkgname; then
				echo "aur2ccr: $pkgname dependency '$apkgname' already in CCR or repos as '$cpkgname', continuing"
			else 
				echo "aur2ccr: There seems to be a bad definition in $confdir/$namesconf. Please fix this."
				echo "aur2ccr: The offending line is: '$apkgname=$cpkgname'"
				let badpkgs=$badpkgs+1
				return 1
			fi
		else
			let depsnotinccr=$depsnotinccr+1
			echo "aur2ccr: $pkgname dependency '$pkg' not in CCR or repos, looking at Arch packages"
			if isinaur $pkg; then
				pushd "$(pwd)"
				if !(makeccrpkg $pkg); then
					echo "aur2ccr: Some error occurred while building '$pkg'"
					echo "aur2ccr: Without this dependency, $pkgname cannot be built"
					return 1
				fi
				popd
			elif isinarchr $pkg; then
				echo "'$pkg' is in the Arch repos, but this feature is not ready yet."
				let badpkgs=$badpkgs+1
				failedpkgs="$failedpkgs $pkgname"
				return 1
				#makeccrpkg_r $pkg
			else
				echo "aur2ccr: Sorry, dependency '$pkg' cannot be found."
			fi
		fi
	done
	if [ "$depsnotinccr" -eq 0 ]; then
		echo "Testing package '$pkgname'..."
		if !(makepkg -sfr); then
			echo "aur2ccr: Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
			let badpkgs=$badpkgs+1
			failedpkgs="$failedpkgs $pkgname"
			return 1
		fi
	else
		echo "aur2ccr: Package '$pkgname' has dependencies outside of CCR or Chakra repos."
		echo "aur2ccr: Running 'makepkg -s' on this package will fail, so we cannot test it now."
		echo "aur2ccr: Please test the final .src.tar.gz package manually with ccr."
	fi
	if [ -n "$maintainer" ]; then
		echo "aur2ccr: Changing maintainer information..."
		addmaintainer "$maintainer"
		echo "aur2ccr: Done"
	fi
	if (makepkg --source -f); then
		echo "aur2ccr: Package '$pkgname' built successfully."
		if [ "$consolidate" -eq 1 ]; then
			pkgpkg="$(ls $pkgname*.src.tar.gz)"
			mv $pkgpkg "$startdir"
			echo "aur2ccr: $pkgpkg moved to $startdir"
		fi
	else
		echo "aur2ccr: Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	return 0
}

makeccrpkg_u() {
	cd "$startdir"
	local pkgname="$(basename "$url" | sed 's/\([^\.]\)\..*/\1/')"  # if $url is http://example.com/path/package.tar.gz, $pkgname is set to "package".
	mkdir -p "$pkgname"
	cd "$pkgname"
	myfile="$BASHPID-$(basename "$url")"
	if !(wget -O "$myfile" "$url"); then 
		echo "aur2ccr: There was an error while trying to download the package"
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	dir="$(tar -taf "$myfile" | head -1)"
	if !(tar -xaf "$myfile"); then
		echo "aur2ccr: tar could not extract the archive"
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	cd "$dir"
	if ! test -r PKGBUILD; then
		echo "aur2ccr: The package you specified does not seem to be a valid source archive."
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	depsnotinccr=0
	if [ "$edit" -eq 1 ]; then
		echo "aur2ccr: Opening '$pkgname' PKGBUILD with $EDITOR"
		$EDITOR PKGBUILD
	fi
	depends
	for pkg in $depends; do 
		if isinccr $pkg; then 
			echo "aur2ccr: $pkgname dependency '$pkg' already in CCR or repos, continuing"
		elif namelookup $pkg; then
			if isinccr $cpkgname; then
				echo "aur2ccr: $pkgname dependency '$apkgname' already in CCR or repos as '$cpkgname', continuing"
			else 
				echo "aur2ccr: There seems to be a bad definition in $confdir/$namesconf. Please fix this."
				echo "aur2ccr: The offending line is: '$apkgname=$cpkgname'"
				let badpkgs=$badpkgs+1
				return 1
			fi
		else
			let depsnotinccr=$depsnotinccr+1
			echo "aur2ccr: $pkgname dependency '$pkg' not in CCR or repos, looking at Arch packages"
			if isinaur $pkg; then
				pushd "$(pwd)"
				if !(makeccrpkg $pkg); then
					echo "aur2ccr: Some error occurred while building '$pkg'"
					echo "aur2ccr: Without this dependency, $pkgname cannot be built"
					return 1
				fi
				popd
			elif isinarchr $pkg; then
				echo "'$pkg' is in the Arch repos, but this feature is not ready yet."
				let badpkgs=$badpkgs+1
				failedpkgs="$failedpkgs $pkgname"
				return 1
				#makeccrpkg_r $pkg
			else
				echo "aur2ccr: Sorry, dependency '$pkg' cannot be found."
			fi
		fi
	done
	if [ "$depsnotinccr" -eq 0 ]; then
		echo "Testing package '$pkgname'..."
		if !(makepkg -sfr); then
			echo "aur2ccr: Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
			let badpkgs=$badpkgs+1
			failedpkgs="$failedpkgs $pkgname"
			return 1
		fi
	else
		echo "aur2ccr: Package '$pkgname' has dependencies outside of CCR or Chakra repos."
		echo "aur2ccr: Running 'makepkg -s' on this package will fail, so we cannot test it now."
		echo "aur2ccr: Please test the final .src.tar.gz package manually with ccr."
	fi
	if [ -n "$maintainer" ]; then
		echo "aur2ccr: Changing maintainer information..."
		addmaintainer "$maintainer"
		echo "aur2ccr: Done"
	fi
	if (makepkg --source -f); then
		echo "aur2ccr: Package '$pkgname' built successfully."
		if [ "$consolidate" -eq 1 ]; then
			pkgpkg="$(ls $pkgname*.src.tar.gz)"
			mv $pkgpkg "$startdir"
			echo "aur2ccr: $pkgpkg moved to $startdir"
		fi
	else
		echo "aur2ccr: Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	return 0
}

makeccrpkg_f() {
	cd "$startdir"
	if ! test -r "$file"; then
		echo "aur2ccr: '$file' cannot be opened or does not exist"
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	local pkgname="$(basename "$file" | sed 's/\([^\.]\)\..*/\1/')"
	mkdir -p "$pkgname"
	dir="$(tar -taf "$file" | head -1)"
	if !(tar -xaf "$file" -C "$pkgname"); then
		echo "aur2ccr: tar could not extract the archive"
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	cd "$pkgname"
	cd "$dir"
	if ! test -r PKGBUILD; then
		echo "aur2ccr: The package you specified does not seem to be a valid source archive."
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	depsnotinccr=0
	if [ "$edit" -eq 1 ]; then
		echo "aur2ccr: Opening '$pkgname' PKGBUILD with $EDITOR"
		$EDITOR PKGBUILD
	fi
	depends
	for pkg in $depends; do 
		if isinccr $pkg; then 
			echo "aur2ccr: $pkgname dependency '$pkg' already in CCR or repos, continuing"
		elif namelookup $pkg; then
			if isinccr $cpkgname; then
				echo "aur2ccr: $pkgname dependency '$apkgname' already in CCR or repos as '$cpkgname', continuing"
			else 
				echo "aur2ccr: There seems to be a bad definition in $confdir/$namesconf. Please fix this."
				echo "aur2ccr: The offending line is: '$apkgname=$cpkgname'"
				let badpkgs=$badpkgs+1
				return 1
			fi
		else
			let depsnotinccr=$depsnotinccr+1
			echo "aur2ccr: $pkgname dependency '$pkg' not in CCR or repos, looking at Arch packages"
			if isinaur $pkg; then
				pushd "$(pwd)"
				if !(makeccrpkg $pkg); then
					echo "aur2ccr: Some error occurred while building '$pkg'"
					echo "aur2ccr: Without this dependency, $pkgname cannot be built"
					return 1
				fi
				popd
			elif isinarchr $pkg; then
				echo "'$pkg' is in the Arch repos, but this feature is not ready yet."
				let badpkgs=$badpkgs+1
				failedpkgs="$failedpkgs $pkgname"
				return 1
				#makeccrpkg_r $pkg
			else
				echo "aur2ccr: Sorry, dependency '$pkg' cannot be found."
			fi
		fi
	done
	if [ "$depsnotinccr" -eq 0 ]; then
		echo "Testing package '$pkgname'..."
		if !(makepkg -sfr); then
			echo "aur2ccr: Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
			let badpkgs=$badpkgs+1
			failedpkgs="$failedpkgs $pkgname"
			return 1
		fi
	else
		echo "aur2ccr: Package '$pkgname' has dependencies outside of CCR or Chakra repos."
		echo "aur2ccr: Running 'makepkg -s' on this package will fail, so we cannot test it now."
		echo "aur2ccr: Please test the final .src.tar.gz package manually with ccr."
	fi
	if [ -n "$maintainer" ]; then
		echo "aur2ccr: Changing maintainer information..."
		addmaintainer "$maintainer"
		echo "aur2ccr: Done"
	fi
	if (makepkg --source -f); then
		echo "aur2ccr: Package '$pkgname' built successfully."
		if [ "$consolidate" -eq 1 ]; then
			pkgpkg="$(ls $pkgname*.src.tar.gz)"
			mv $pkgpkg "$startdir"
			echo "aur2ccr: $pkgpkg moved to $startdir"
		fi
	else
		echo "aur2ccr: Some error occurred, check the $pkgname PKGBUILD in $(pwd)"
		let badpkgs=$badpkgs+1
		failedpkgs="$failedpkgs $pkgname"
		return 1
	fi
	return 0
}

namelookup() {	# see https://github.com/redhat69/aur2ccr/issues/1
	if test -r "$confdir/$namesconf"; then
		if (grep -q "$1=..*" "$confdir/$namesconf"); then
			apkgname="$1"
			cpkgname="$(grep "^$1=..*" "$confdir/$namesconf" | sed "s/$1=//")"
		else
			return 1
		fi
	else 
		return 1
	fi
	return 0
}

pkgsearch() {
	# this function should NEVER be called except right after isinarchr!
	echo "Package '$1' not found in AUR or Arch repos."
	echo "Did you mean: "
	printf '[community]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[core]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[extra]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/i686\n\n[multilib]\nServer = http://ftp.osuosl.org/pub/archlinux/$repo/os/x86_64\n' > pacman.conf.tmp
	pacman -Ss $1 --config pacman.conf.tmp
	sudo pacman -Sy >&2> /dev/null &
	rm -f pacman.conf.tmp
	exit 0
}

checkaur() {
	if isinaur $1; then 
		if !(makeccrpkg $1); then
			let badpkgs=$badpkgs+1
			failedpkgs="$failedpkgs $1"
		fi
	else
		if isinarchr $1; then
			echo "'$1' is in Arch repos, but this feature is not yet ready."
			let badpkgs=$badpkgs+1
			failedpkgs="$failedpkgs $1"
		#	makeccrpkg_r $1
#		elif isinaur "$(namelookup $1)"; then
#			if !(makeccrpkg "$apkgname"); then
#				let badpkgs=$badpkgs+1
#				failedpkgs="$failedpkgs $1"
#			fi
#		elif isinarchr "$(namelookup $1)"; then
#			echo "'$1' is in Arch repos, but this feature is not yet ready."
#			let badpkgs=$badpkgs+1
#			failedpkgs="$failedpkgs $1"
#		#	makeccrpkg_r $1
		else 
			pkgsearch $1
		fi
	fi
}

usage() {
	echo "Usage: $0 [OPTIONS] [PACKAGES]"
	echo "Create CCR-ready source packages from packages in AUR or Arch repos"
	echo "Example: $0 twisted"
	echo 
	echo "Options: "
	echo "  -m <maintainer> 	add maintainer information to each PKGBUILD before building"
	echo "                  	<maintainer> should be in the form 'My Name (nick) <me@example.com>'"
	echo "  -e			edit the PKGBUILD for each package with \$EDITOR before building"
	echo "  -c			move all CCR source packages into the working directory"
	echo "  -f <file>		create a CCR source package from source package <file>"
	echo "  -u <URL>		... or from an AUR/CCR-compatible source package at <URL>"
	echo "  -h			display this help and exit"
	echo "  -v			print version information and exit"
	echo 
	echo "Note: Options must be specified separately, like '-c -e', not '-ce'."
	echo "This will (hopefully) be fixed in a future version."
	echo 
	echo "Report bugs at: <https://github.com/redhat69/aur2ccr/issues/>"
	echo "aur2ccr home: <https://github.com/redhat69/aur2ccr/>"
	exit 0
}

popopts() {	# populate variables, enumerate options and arguments -- crappy - if you have a better way, *please* tell me
	for arg in "$@"; do 
		if [ -n "$isfile" -a "$isfile" == 1 ]; then
			file="$arg"
			isfile=0
			continue
		elif [ -n "$isurl" -a "$isurl" == 1 ]; then 
			url="$arg"
			isurl=0
			continue
		elif [ -n "$ismaint" -a "$ismaint" == 1 ]; then
			maintainer="$arg"
			ismaint=0
			continue
		fi
		if [ -n "$arg" -a "$arg" == "-m" ]; then
			ismaint=1
		elif [ -n "$arg" -a "$arg" == "-e" ]; then
			edit=1
		elif [ -n "$arg" -a "$arg" == "-c" ]; then
			consolidate=1
		elif [ -n "$arg" -a "$arg" == "-f" ]; then
			isfile=1
		elif [ -n "$arg" -a "$arg" == "-u" ]; then
			isurl=1
		elif [ -n "$arg" -a "$arg" == "-h" ]; then
			usage
		elif [ -n "$arg" -a "$arg" == "-v" ]; then
			echo "$pname $pver"
			exit 0
		else
			args="$args $arg"
		fi
	done
	if [ -z "$args" -a -z "$url" -a -z "$file" ]; then 
		echo "You did not specify any packages to build"
		echo "There is nothing to do. Exiting..."
		exit 1
	fi
}

# main()
if [ -z "$1" -o "$1" == "--help" ]; then	# if no arguments were supplied, print usage info
	usage
fi

popopts "$@"

trap clean INT	# trap keyboard interrupts (^C), in order to clean up temp files

for pkgname in $args; do
	if isinccr $pkgname; then
		echo "$pkgname is already in CCR or main Chakra repos."
		echo -n "Continue anyway? [y/N] "
		read ans
		if [ -z "$ans" -o "$ans" == "n" -o "$ans" == "N" ]; then 
			echo "Skipping $pkgname"
			continue
		else 
			checkaur $pkgname
		fi
	elif namelookup $pkgname; then
		echo "$apkgname is already in CCR or main Chakra repos as $cpkgname."
		echo -n "Continue anyway? [y/N] "
		read ans
		if [ -z "$ans" -o "$ans" == "n" -o "$ans" == "N" ]; then 
			echo "Skipping $pkgname"
			continue
		else 
			checkaur $pkgname
		fi
	else
		checkaur $pkgname
	fi
done
if [ -n "$url" ]; then
	makeccrpkg_u
fi; if [ -n "$file" ]; then
	makeccrpkg_f
fi

echo "aur2ccr: $badpkgs package(s) failed"
if [ -n "$failedpkgs" ]; then 
	echo "aur2ccr: The bad package(s) are:"
	echo -n "aur2ccr:"
	echo "$failedpkgs" >&2
fi
